#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: Florian Lambert <florian.lambert@cycloid.io>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import sys
import argparse
import logging as log
import json
import requests
import os

VERSION = '1.0'

# Override arg parser to also take env vars eg :
# https://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, boolean=False, **kwargs):
        default = os.environ.get(envvar, default)
        if not isinstance(default, bool) and boolean:
            default = strtobool(default)
        if required and default is not None:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required, 
                                         **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

PARSER = argparse.ArgumentParser(description='Refresh pipeline Cycloid.io')

PARSER.add_argument("-u", "--username",
                    required=True,
                    action=EnvDefault,
                    envvar='USERNAME',
                    help='Username')
PARSER.add_argument("-p", "--password",
                    required=True,
                    action=EnvDefault,
                    envvar='PASSWORD',
                    help='Password')
PARSER.add_argument("-o", "--organization",
                    required=True,
                    action=EnvDefault,
                    envvar='ORGANIZATION',
                    help='Organization name')
PARSER.add_argument("-a", "--api-url",
                    type=str,
                    help='Cycloid api url name',
                    action=EnvDefault,
                    envvar='API_URL',
                    default='https://http-api.cycloid.io')
PARSER.add_argument("--version", action='store_true',
                    help='Print script version')
ARGS = PARSER.parse_args()


def login(apilogin, api_password, api_url, organization):
    payload = {'email': apilogin, 'password': api_password}
    headers = {'content-type': 'application/vnd.cycloid.io.v1+json'}
    try:
        # Get user token
        r = requests.post('%s/user/login' % (api_url), data=json.dumps(payload), headers=headers)
        user_token = r.json().get('data').get('token')
        # Get org token
        headers['Authorization'] = 'Bearer %s' % user_token
        r = requests.get('%s/user/refresh_token?organization_canonical=%s' % (api_url, organization), headers=headers)
        return r.json().get('data').get('token')
    except:
        log.error("There is an error on login, please check your configuration - %s" % r.text)
        exit(1)


if __name__ == "__main__":

    if ARGS.version:
        print("version: %s" % VERSION)
        sys.exit(0)

    token = login(ARGS.username, ARGS.password, ARGS.api_url, ARGS.organization)
    print(token)
