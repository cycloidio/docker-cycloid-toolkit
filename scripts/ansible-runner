#!/bin/sh

usage()
{
    echo 'You should provide the following env vars :'
    echo ''
    echo "$0"
    echo '  * `AWS_ACCESS_KEY_ID` : Used by Amazon EC2 dynamic inventory'
    echo '  * `AWS_SECRET_ACCESS_KEY`: Used by Amazon EC2 dynamic inventory'
    echo '  * `SSH_PRIVATE_KEY` : SSH key to use to connect on servers'
    echo '  * `(BASTION_URL)` : SSH url of the bastion server. Exemple : `admin@myserver.com`'
    echo '  * `(TAGS)`: Only run plays and tasks tagged with these values'
    echo '  * `(SKIP_TAGS)` : only run plays and tasks whose tags do not match these values'
    echo '  * `(EXTRA_ANSIBLE_ARGS)` Additional ansible-playbook arguments'
    echo '  * `(EXTRA_ANSIBLE_VARS)` json dict format. Ansible extra-vars, set additional variables'
    echo '  * `(ANSIBLE_REMOTE_USER)` default : `admin` Ansible remote user'
    echo '  * `(ANSIBLE_GALAXY_EXTRA_ARGS)` Additional ansible-galaxy arguments'
    echo '  * `(ANSIBLE_VAULT_PASSWORD)` : Vault password if you use [Ansible Vault](https://docs.ansible.com/ansible/latest/user_guide/vault.html) files'
    echo '  * `(ANSIBLE_FORCE_GALAXY)` default `false`. Force to run Ansible galaxy to updated eventual cached ansible roles'
    echo '  * `(ANSIBLE_PLAYBOOK_NAME)` default : `site.yml` Name of the ansible playbook to run'
    echo '  * `(ANSIBLE_PLAYBOOK_PATH)` default : `ansible-playbook` Path of the ansible playbook to run'
    echo 'ec2.py vars :'
    echo '  * `(EC2_VPC_DESTINATION_VARIABLE)` default `private_ip_address`. Can be `ip_address` for public ip address, see https://github.com/ansible/ansible/blob/devel/contrib/inventory/ec2.ini'
    echo ''
    exit 1
}
if [ -n "$1" ]; then usage; fi

# Set defaults
export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-eu-west-1}"
export ANSIBLE_PLAYBOOK_PATH="${ANSIBLE_PLAYBOOK_PATH:-ansible-playbook}"
export ANSIBLE_PLAYBOOK_NAME="${ANSIBLE_PLAYBOOK_NAME:-site.yml}"
export ANSIBLE_REMOTE_USER="${ANSIBLE_REMOTE_USER:-admin}"
export ANSIBLE_FORCE_GALAXY="${ANSIBLE_FORCE_GALAXY:-false}"
export ANSIBLE_VAULT_PASSWORD="${ANSIBLE_VAULT_PASSWORD:-fake}"
# Used to set a a default ssh multiplex. You can override it to disable it
export EXTRA_ANSIBLE_SSH_ARGS="${EXTRA_ANSIBLE_SSH_ARGS:-"-o ControlMaster=auto -o ControlPersist=60s"}"
export ANSIBLE_SSH_ARGS="${ANSIBLE_SSH_ARGS} ${EXTRA_ANSIBLE_SSH_ARGS}"
export ANSIBLE_FORCE_COLOR=true
export ANSIBLE_STDOUT_CALLBACK="${ANSIBLE_STDOUT_CALLBACK:-actionable}"
# Default env var for ec2.py
export EC2_VPC_DESTINATION_VARIABLE="${EC2_VPC_DESTINATION_VARIABLE:-private_ip_address}"

# Keep compatibility with old naming of ssh key
export SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY:-$BASTION_PRIVATE_KEY}"
export EXTRA_ANSIBLE_VARS="${EXTRA_ANSIBLE_VARS:-$EXTRA_VARS}"
export EXTRA_ANSIBLE_ARGS="${EXTRA_ANSIBLE_ARGS:-$EXTRA_ARGS}"

# Check args
if [ -z "$AWS_ACCESS_KEY_ID" ] ||
[ -z "$AWS_SECRET_ACCESS_KEY" ] ||
[ -z "$SSH_PRIVATE_KEY" ]; then
usage
fi

# Construct vars
if [ -n "$EXTRA_ANSIBLE_VARS" ]; then
  EXTRA_ANSIBLE_ARGS="${EXTRA_ANSIBLE_ARGS} $(echo $EXTRA_ANSIBLE_VARS | jq -r 'to_entries[] | "-e \(.key)=\(.value | .)"' | tr '\n' ' ')"
fi
if [ -n "$TAGS" ]; then
  EXTRA_ANSIBLE_ARGS="${EXTRA_ANSIBLE_ARGS} --tags $(echo $TAGS | jq -r '. | join(",")')"
fi
if [ -n "$SKIP_TAGS" ]; then
  EXTRA_ANSIBLE_ARGS="${EXTRA_ANSIBLE_ARGS} --skip-tags $(echo $SKIP_TAGS | jq -r '. | join(",")')"
fi

if [ "$ANSIBLE_FORCE_GALAXY" == "true" ]; then
  ANSIBLE_GALAXY_EXTRA_ARGS="${ANSIBLE_GALAXY_EXTRA_ARGS} --force"
fi

# Setup ssh access
echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa
chmod 600  /root/.ssh/id_rsa
echo ${ANSIBLE_VAULT_PASSWORD} > $ANSIBLE_PLAYBOOK_PATH/.vault-password
#export DEFAULT_VAULT_PASSWORD_FILE="$ANSIBLE_PLAYBOOK_PATH/.vault-password"

# Render ec2.ini template from env vars
envsubst < /etc/ansible/hosts/ec2.ini.template > /etc/ansible/hosts/ec2.ini

set -xe

if [ -n "$BASTION_URL" ]; then
  export ANSIBLE_SSH_ARGS="$ANSIBLE_SSH_ARGS"' -o ProxyCommand="ssh -W %h:%p -q '${BASTION_URL}'"'
  #echo "ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -q ${BASTION_URL}\"'" >> $ANSIBLE_PLAYBOOK_PATH/group_vars/all
fi

cd $ANSIBLE_PLAYBOOK_PATH

if [ -f "requirements.yml" ]; then
    ansible-galaxy install -r requirements.yml --roles-path=roles -v ${ANSIBLE_GALAXY_EXTRA_ARGS}
fi

echo "######################## Running ansible playbook $ANSIBLE_PLAYBOOK_NAME"

ansible-playbook -u $ANSIBLE_REMOTE_USER --vault-password-file=.vault-password $ANSIBLE_PLAYBOOK_NAME --diff ${EXTRA_ANSIBLE_ARGS}

exit $?
