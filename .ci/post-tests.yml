---
platform: linux
image_resource:
  type: docker-image
  source:
    repository: docker
    tag: 18.04.0-dind
run:
  path: /bin/sh
  args:
    - '-xc'
    - |

      #mountpoint="/sys/fs/cgroup/"
      #mkdir -p /sys/fs/cgroup
      #mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
      #mount -o remount,rw /sys/fs/cgroup

      mkdir -p /sys/fs/cgroup
      mountpoint -q /sys/fs/cgroup || \
      mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
       
      mount -o remount,rw /sys/fs/cgroup
      echo " ---- Mounted"
      sed -e 1d /proc/cgroups | while read sys hierarchy num enabled; do
      if [ "$enabled" != "1" ]; then
        # subsystem disabled; skip
        continue
      fi
       
      echo " ---- grouping"
      grouping="$(cat /proc/self/cgroup | cut -d: -f2 | grep "\\<$sys\\>")"
      if [ -z "$grouping" ]; then
        # subsystem not mounted anywhere; mount it on its own
        echo " ---- grouping -> $sys"
        grouping="$sys"
      fi
      echo " ---- grouping <- $grouping"
       
      mountpoint="/sys/fs/cgroup/$grouping"
       
      mkdir -p "$mountpoint"
       
      # clear out existing mount to make sure new one is read-write
      echo " ---- checkmount $mountpoint"
      if mountpoint -q "$mountpoint"; then
      echo " ---- umount $mountpoint"
        umount "$mountpoint"
      fi
       
      mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"
       
      if [ "$grouping" != "$sys" ]; then
        if [ -L "/sys/fs/cgroup/$sys" ]; then
          echo " ---- do rm"
          echo rm "/sys/fs/cgroup/$sys"
          rm "/sys/fs/cgroup/$sys"
        fi
       
        echo " ---- do symlink"
        echo ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
        ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
      fi
      done

      #/usr/local/bin/dockerd-entrypoint.sh --log-level error 2> docker.log &
      /usr/local/bin/dockerd-entrypoint.sh &
      timeout 60 sh -c "until docker info >/dev/null 2>&1; do echo waiting for docker to come up...; sleep 1; done"
      mount | grep "none on /tmp type tmpfs" && umount /tmp
      docker load -q -i image/image.tar
      docker inspect $REPOSITORY:$TAG

      export IMAGE_NAME="${REPOSITORY}:${TAG}"
      apk update && apk add -q --no-progress python3 py-pip
      pip3 install -q -r merged-stack/tests-requirements.txt

      cd merged-stack
      python3 tests.py -vvv

      rc=$?
      pkill -TERM dockerd
      echo $rc
      exit 1
inputs:
- name: merged-stack
- name: image
params:
  REPOSITORY: image
  TAG: latest
